---
name: build-alpine

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  # cron to run every Sunday at 04:34 UTC
  schedule:
    - cron: "34 4 * * 0"

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "${{ github.repository }}-alpine"

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      alpine-version: ${{ steps.out.outputs.alpine-version }}
      base_digest: ${{ steps.out.outputs.base_digest }}
      apk_version: ${{ steps.out.outputs.apk_version }}
      primary: ${{ steps.out.outputs.primary }}
      compat1: ${{ steps.out.outputs.compat1 }}
      compat2: ${{ steps.out.outputs.compat2 }}
      latest: ${{ steps.out.outputs.latest }}
      should_build: ${{ steps.out.outputs.should_build }}
    steps:
      - name: Detect Alpine version
        id: alpine-version
        run: |
          set -euo pipefail
          ALPINE_VERSION=$(docker run --rm alpine:latest cat /etc/os-release | \
            grep VERSION_ID | \
            awk -F'=' ' { print $NF } ' | \
            tr -d '[:space:]')
          BASE_DIGEST=$(docker manifest inspect "alpine:${ALPINE_VERSION}" | awk -F\" '/"digest":/ {print $4; exit}')
          echo "Alpine stable version: $ALPINE_VERSION (BASE_DIGEST=$BASE_DIGEST)"
          echo "alpine-version=$ALPINE_VERSION" >> "$GITHUB_OUTPUT"
          echo "base_digest=$BASE_DIGEST" >> "$GITHUB_OUTPUT"

      - name: Extract openvpn version
        id: openvpn-version
        run: |
          set -euo pipefail
          OPENVPN_VERSION=$(docker run --rm alpine:latest sh -ec 'apk update >/dev/null; apk policy openvpn' | awk '/^[[:space:]]+[0-9]+\.[0-9]+\.[0-9]+-r[0-9]+:/ {print $1; exit}' | cut -d- -f1)
          echo "Detected OpenVPN APK version: $OPENVPN_VERSION"
          echo "apk_version=$OPENVPN_VERSION" >> "$GITHUB_OUTPUT"

      - name: Compose tags
        id: tags
        run: |
          set -euo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          ALPINE_VERSION="${{ steps.alpine-version.outputs.alpine-version }}"
          APK_VERSION="${{ steps.openvpn-version.outputs.apk_version }}"
          echo "primary=${IMG}:alpine-${ALPINE_VERSION}-openvpn-${APK_VERSION}" >> "$GITHUB_OUTPUT"
          echo "compat1=${IMG}:${APK_VERSION}-alpine-${ALPINE_VERSION}" >> "$GITHUB_OUTPUT"
          echo "compat2=${IMG}:${APK_VERSION}" >> "$GITHUB_OUTPUT"
          echo "latest=${IMG}:latest" >> "$GITHUB_OUTPUT"

      - name: Decide build/push
        id: out
        run: |
          set -euo pipefail
          echo "alpine_version=${{ steps.alpine-version.outputs.alpine-version }}" >> "$GITHUB_OUTPUT"
          echo "apk_version=${{ steps.openvpn-version.outputs.apk_version }}" >> "$GITHUB_OUTPUT"
          echo "primary=${{ steps.tags.outputs.primary }}"   >> "$GITHUB_OUTPUT"
          echo "compat1=${{ steps.tags.outputs.compat1 }}"   >> "$GITHUB_OUTPUT"
          echo "compat2=${{ steps.tags.outputs.compat2 }}"   >> "$GITHUB_OUTPUT"
          echo "latest=${{ steps.tags.outputs.latest }}"     >> "$GITHUB_OUTPUT"

          IMAGE="${{ steps.tags.outputs.primary }}"

          if docker pull "$IMAGE" >/dev/null 2>&1; then
            REMOTE_BASE=$(docker inspect --format '{{ index .Config.Labels "org.opencontainers.image.base.digest" }}' "$IMAGE" 2>/dev/null || true)
            echo "Image already exists, digest: $REMOTE_BASE"
          else
            echo "Image does not exist"
            REMOTE_BASE=""
          fi

          if [ "${{ github.event_name }}" != "schedule" ] || { [ -z "$REMOTE_BASE" ] || [ "$REMOTE_BASE" != "$BASE_DIGEST" ] && [ "${{ github.ref }}" = "refs/heads/master" ]; }; then
            echo "should_build=true"  >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

  build-amd64:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.alpine
          platforms: linux/amd64
          push: true
          build-args: |
            ALPINE_VERSION=${{ needs.prepare.outputs.alpine_version }}
            ALPINE_BRANCH="${{ needs.prepare.outputs.alpine_version }}-stable"
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-${{ needs.prepare.outputs.alpine_version }}-openvpn-${{ needs.prepare.outputs.apk_version }}-amd64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-alpine-${{ needs.prepare.outputs.alpine_version }}-amd64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-amd64
          labels: |
            org.opencontainers.image.version=${{ needs.prepare.outputs.apk_version }}
            org.opencontainers.image.base.name=alpine:${{ needs.prepare.outputs.alpine_version }}
            org.opencontainers.image.base.digest=${{ needs.prepare.outputs.base_digest }}
            org.opencontainers.image.ref.name=openvpn=${{ needs.prepare.outputs.apk_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04-arm   # Hosted ARM64 runner
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.alpine
          platforms: linux/arm64
          push: true
          build-args: |
            ALPINE_VERSION=${{ needs.prepare.outputs.alpine_version }}
            ALPINE_BRANCH="${{ needs.prepare.outputs.alpine_version }}-stable"
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-${{ needs.prepare.outputs.alpine_version }}-openvpn-${{ needs.prepare.outputs.apk_version }}-arm64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-alpine-${{ needs.prepare.outputs.alpine_version }}-arm64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-arm64
          labels: |
            org.opencontainers.image.version=${{ needs.prepare.outputs.apk_version }}
            org.opencontainers.image.base.name=alpine:${{ needs.prepare.outputs.alpine_version }}
            org.opencontainers.image.base.digest=${{ needs.prepare.outputs.base_digest }}
            org.opencontainers.image.ref.name=openvpn=${{ needs.prepare.outputs.apk_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Optional: keep a slow QEMU build for arm/v7 (Raspberry Pi OS 32-bit)
  # build-armv7:
  #   needs: prepare
  #   if: needs.prepare.outputs.should_build == 'true'
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-qemu-action@v3
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & push (arm/v7)
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/arm/v7
  #         push: true
  #         build-args: |
  #          ALPINE_VERSION=${{ needs.prepare.outputs.alpine_version }}
  #          ALPINE_BRANCH="${{ needs.prepare.outputs.alpine_version }}-stable"
  #         tags: |
  #            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine-${{ needs.prepare.outputs.alpine_version }}-openvpn-${{ needs.prepare.outputs.apk_version }}-armv7
  #            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-alpine-${{ needs.prepare.outputs.alpine_version }}-armv7
  #            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.apk_version }}-armv7

  manifest:
    needs: [prepare, build-amd64, build-arm64]  # add build-armv7 if you enable it
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifests
        run: |
          set -eux
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          ALPINE_VERSION=${{ needs.prepare.outputs.alpine_version }}
          APK_VER='${{ needs.prepare.outputs.steps.apk_version }}'

          SRC_AMD64="$IMG:alpine-$ALPINE_VERSION-openvpn-$APK_VER-amd64"
          SRC_ARM64="$IMG:alpine-$ALPINE_VERSION-openvpn-$APK_VER-arm64"
          # If you add armv7, include it here:
          # SRC_ARMV7="$IMG:alpine-$ALPINE_VERSION-openvpn-$APK_VER-armv7"

          # primary, compat1, compat2
          docker buildx imagetools create \
            -t "$IMG:alpine-$ALPINE_VERSION-openvpn-$APK_VER" \
            -t "$IMG:$APK_VER-alpine-$ALPINE_VERSION" \
            -t "$IMG:$APK_VER" \
            "$SRC_AMD64" "$SRC_ARM64"

          # latest only on default branch (master)
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker buildx imagetools create \
              -t "$IMG:latest" \
              "$SRC_AMD64" "$SRC_ARM64"
          fi
