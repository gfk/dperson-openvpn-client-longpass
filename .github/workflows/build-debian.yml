---
name: build-debian

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  # cron to run every night at 04:34 UTC
  schedule:
    - cron: "34 4 * * *"

concurrency:
  group: build-debian-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "${{ github.repository }}-debian"

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      codename: ${{ steps.out.outputs.codename }}
      base_digest_amd64: ${{ steps.out.outputs.base_digest_amd64 }}
      base_digest_arm64: ${{ steps.out.outputs.base_digest_arm64 }}
      deb_version: ${{ steps.out.outputs.deb_version }}
      safe_deb_version: ${{ steps.out.outputs.safe_deb_version }}
      primary: ${{ steps.out.outputs.primary }}
      compat1: ${{ steps.out.outputs.compat1 }}
      compat2: ${{ steps.out.outputs.compat2 }}
      latest: ${{ steps.out.outputs.latest }}
      should_build: ${{ steps.out.outputs.should_build }}
    steps:
      - name: Detect Debian stable codename
        id: debian-version
        run: |
          set -euo pipefail
          # Resolve stable codename by inspecting /etc/os-release inside the base image
          OSREL=$(docker run --rm debian:stable-slim bash -lc 'cat /etc/os-release')
          CODENAME=$(printf "%s" "$OSREL" | awk -F= '/^VERSION_CODENAME=/{print $2}')
          VERSION_ID=$(printf "%s" "$OSREL" | awk -F= '/^VERSION_ID=/{print $2}')
          BASE_JSON=$(docker manifest inspect "debian:${CODENAME}-slim")
          BASE_DIGEST_AMD64=$(printf '%s' "$BASE_JSON" | python -c 'import json,sys; m=json.load(sys.stdin); print([d["digest"] for d in m["manifests"] if d["platform"]["architecture"]=="amd64"][0])')
          BASE_DIGEST_ARM64=$(printf '%s' "$BASE_JSON" | python -c 'import json,sys; m=json.load(sys.stdin); print([d["digest"] for d in m["manifests"] if d["platform"]["architecture"]=="arm64"][0])')
          echo "Debian stable codename: $CODENAME (VERSION_ID=$VERSION_ID; BASE_DIGEST_AMD64=$BASE_DIGEST_AMD64; BASE_DIGEST_ARM64=$BASE_DIGEST_ARM64)"
          echo "codename=$CODENAME" >> "$GITHUB_OUTPUT"
          echo "version_id=$VERSION_ID" >> "$GITHUB_OUTPUT"
          echo "base_digest_amd64=$BASE_DIGEST_AMD64" >> "$GITHUB_OUTPUT"
          echo "base_digest_arm64=$BASE_DIGEST_ARM64" >> "$GITHUB_OUTPUT"

      - name: Extract openvpn version
        id: openvpn-version
        run: |
          DEBVER=$(docker run --rm debian:stable-slim bash -lc 'apt-get update -qq && apt-cache policy openvpn | awk "/Candidate:/ {print \$2}"')
          if [ -z "$DEBVER" ] || [ "$DEBVER" = "(none)" ]; then
            echo "Failed to detect OpenVPN version from apt-cache policy"; exit 1
          fi
          echo "Detected OpenVPN Debian version: $DEBVER"
          # OCI tags cannot contain '+'; normalize
          SAFE_DEBVER=$(printf "%s" "$DEBVER" | tr '+' '_' | tr ' ' '_')
          echo "deb_version=$DEBVER" >> "$GITHUB_OUTPUT"
          echo "safe_deb_version=$SAFE_DEBVER" >> "$GITHUB_OUTPUT"

      - name: Compose tags
        id: tags
        run: |
          set -euo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          SUITE="${{ steps.debian-version.outputs.codename }}"
          VER_SAFE="${{ steps.openvpn-version.outputs.safe_deb_version }}"
          echo "primary=${IMG}:debian-${SUITE}-openvpn-${VER_SAFE}" >> "$GITHUB_OUTPUT"
          echo "compat1=${IMG}:${VER_SAFE}-debian-${SUITE}" >> "$GITHUB_OUTPUT"
          echo "compat2=${IMG}:${VER_SAFE}" >> "$GITHUB_OUTPUT"
          echo "latest=${IMG}:latest" >> "$GITHUB_OUTPUT"

      - name: Decide build/push
        id: out
        run: |
          set -euo pipefail
          echo "codename=${{ steps.debian-version.outputs.codename }}" >> "$GITHUB_OUTPUT"
          echo "deb_version=${{ steps.openvpn-version.outputs.deb_version }}" >> "$GITHUB_OUTPUT"
          echo "safe_deb_version=${{ steps.openvpn-version.outputs.safe_deb_version }}" >> "$GITHUB_OUTPUT"
          echo "primary=${{ steps.tags.outputs.primary }}"   >> "$GITHUB_OUTPUT"
          echo "compat1=${{ steps.tags.outputs.compat1 }}"   >> "$GITHUB_OUTPUT"
          echo "compat2=${{ steps.tags.outputs.compat2 }}"   >> "$GITHUB_OUTPUT"
          echo "latest=${{ steps.tags.outputs.latest }}"     >> "$GITHUB_OUTPUT"
          echo "base_digest_amd64=${{ steps.debian-version.outputs.base_digest_amd64 }}" >> "$GITHUB_OUTPUT"
          echo "base_digest_arm64=${{ steps.debian-version.outputs.base_digest_arm64 }}" >> "$GITHUB_OUTPUT"

          IMAGE="${{ steps.tags.outputs.primary }}"
          BASE_DIGEST="${{ steps.debian-version.outputs.base_digest_amd64 }}"

          if docker pull "$IMAGE" >/dev/null 2>&1; then
            DIGEST=$(docker image inspect "$IMAGE" --format '{{ index .RepoDigests 0 }}' 2>/dev/null || true)
            REMOTE_BASE=""
            if [ -n "$DIGEST" ]; then
              REMOTE_BASE=$(docker image inspect "$DIGEST" --format '{{ index .Config.Labels "org.opencontainers.image.base.digest" }}' 2>/dev/null || true)
            fi
            echo "Image already exists, digest: $REMOTE_BASE"
          else
            echo "Image does not exist"
            REMOTE_BASE=""
          fi

          if [ "${{ github.event_name }}" != "schedule" ] || { [ -z "$REMOTE_BASE" ] || [ "$REMOTE_BASE" != "$BASE_DIGEST" ] && [ "${{ github.ref }}" = "refs/heads/master" ]; }; then
            echo "should_build=true"  >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

  build-amd64:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (amd64)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.debian
          platforms: linux/amd64
          push: false
          load: true
          build-args: |
            BASE_SUITE=${{ needs.prepare.outputs.codename }}
            OPENVPN_VERSION=${{ needs.prepare.outputs.deb_version }}
            BASE_DIGEST=${{ needs.prepare.outputs.base_digest_amd64 }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:debian-${{ needs.prepare.outputs.codename }}-openvpn-${{ needs.prepare.outputs.safe_deb_version }}-amd64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-debian-${{ needs.prepare.outputs.codename }}-amd64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-amd64
          labels: |
            org.opencontainers.image.version=${{ needs.prepare.outputs.deb_version }}
            org.opencontainers.image.base.name=debian:${{ needs.prepare.outputs.codename }}-slim
            org.opencontainers.image.ref.name=openvpn=${{ needs.prepare.outputs.deb_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test OpenVPN version (amd64)
        uses: ./.github/actions/openvpn-version-test
        with:
          image: ${{ steps.build.outputs.imageid }}

      - name: Push image (amd64)
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:debian-${{ needs.prepare.outputs.codename }}-openvpn-${{ needs.prepare.outputs.safe_deb_version }}-amd64
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-debian-${{ needs.prepare.outputs.codename }}-amd64
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-amd64

  build-arm64:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04-arm   # Hosted ARM64 runner
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (arm64)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.debian
          platforms: linux/arm64
          push: false
          load: true
          build-args: |
            BASE_SUITE=${{ needs.prepare.outputs.codename }}
            OPENVPN_VERSION=${{ needs.prepare.outputs.deb_version }}
            BASE_DIGEST=${{ needs.prepare.outputs.base_digest_arm64 }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:debian-${{ needs.prepare.outputs.codename }}-openvpn-${{ needs.prepare.outputs.safe_deb_version }}-arm64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-debian-${{ needs.prepare.outputs.codename }}-arm64
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-arm64
          labels: |
            org.opencontainers.image.version=${{ needs.prepare.outputs.deb_version }}
            org.opencontainers.image.base.name=debian:${{ needs.prepare.outputs.codename }}-slim
            org.opencontainers.image.ref.name=openvpn=${{ needs.prepare.outputs.deb_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test OpenVPN version (arm64)
        uses: ./.github/actions/openvpn-version-test
        with:
          image: ${{ steps.build.outputs.imageid }}

      - name: Push image (arm64)
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:debian-${{ needs.prepare.outputs.codename }}-openvpn-${{ needs.prepare.outputs.safe_deb_version }}-arm64
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-debian-${{ needs.prepare.outputs.codename }}-arm64
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-arm64

  # Optional: keep a slow QEMU build for arm/v7 (Raspberry Pi OS 32-bit)
  # build-armv7:
  #   needs: prepare
  #   if: needs.prepare.outputs.should_build == 'true'
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: docker/setup-qemu-action@v3
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build & push (arm/v7)
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/arm/v7
  #         push: true
  #         build-args: |
  #           BASE_SUITE=${{ needs.prepare.outputs.codename }}
  #           OPENVPN_VERSION=${{ needs.prepare.outputs.deb_version }}
  #         tags: |
  #           ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:debian-${{ needs.prepare.outputs.codename }}-openvpn-${{ needs.prepare.outputs.safe_deb_version }}-armv7
  #           ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-debian-${{ needs.prepare.outputs.codename }}-armv7
  #           ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe_deb_version }}-armv7

  manifest:
    needs: [prepare, build-amd64, build-arm64]  # add build-armv7 if you enable it
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifests
        run: |
          set -eux
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          SUITE='${{ needs.prepare.outputs.codename }}'
          VER='${{ needs.prepare.outputs.safe_deb_version }}'

          SRC_AMD64="$IMG:debian-$SUITE-openvpn-$VER-amd64"
          SRC_ARM64="$IMG:debian-$SUITE-openvpn-$VER-arm64"
          # If you add armv7, include it here:
          # SRC_ARMV7="$IMG:debian-$SUITE-openvpn-$VER-armv7"

          # primary, compat1, compat2
          docker buildx imagetools create \
            -t "$IMG:debian-$SUITE-openvpn-$VER" \
            -t "$IMG:$VER-debian-$SUITE" \
            -t "$IMG:$VER" \
            "$SRC_AMD64" "$SRC_ARM64"

          # latest only on default branch (master)
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            docker buildx imagetools create \
              -t "$IMG:latest" \
              "$SRC_AMD64" "$SRC_ARM64"
          fi
