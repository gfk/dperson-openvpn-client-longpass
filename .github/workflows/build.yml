---
name: build

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  pull_request:
    branches:
      - master
    paths-ignore:
      - "**.md"
      - ".gitignore"
  # cron to run every Sunday at 04:34 UTC
  schedule:
    - cron: "34 4 * * 0"

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          pull: true
          load: true
          push: false
          tags: current-build
          build-args: |
            DEBIAN_SUITE=${{ steps.debian-version.outputs.codename }}
            OPENVPN_VERSION=${{ steps.openvpn-version.outputs.deb_version }}

      - name: Detect Debian stable codename
        id: debian-version
        run: |
          set -euo pipefail
          # Resolve stable codename by inspecting /etc/os-release inside the base image
          OSREL=$(docker run --rm debian:stable-slim bash -lc 'cat /etc/os-release')
          CODENAME=$(printf "%s" "$OSREL" | awk -F= '/^VERSION_CODENAME=/{print $2}')
          VERSION_ID=$(printf "%s" "$OSREL" | awk -F= '/^VERSION_ID=/{print $2}')
          echo "Debian stable codename: $CODENAME (VERSION_ID=$VERSION_ID)"
          echo "codename=$CODENAME" >> "$GITHUB_OUTPUT"
          echo "version_id=$VERSION_ID" >> "$GITHUB_OUTPUT"

      - name: Extract openvpn version
        id: openvpn-version
        run: |
          DEBVER=$(docker run --rm debian:stable-slim bash -lc 'apt-get update -qq && apt-cache policy openvpn | awk "/Candidate:/ {print \$2}"')
          if [ -z "$DEBVER" ] || [ "$DEBVER" = "(none)" ]; then
            echo "Failed to detect OpenVPN version from apt-cache policy"; exit 1
          fi
          echo "Detected OpenVPN Debian version: $DEBVER"
          # OCI tags cannot contain '+'; normalize
          SAFE_DEBVER=$(printf "%s" "$DEBVER" | tr '+' '_' | tr ' ' '_')
          echo "deb_version=$DEBVER" >> "$GITHUB_OUTPUT"
          echo "safe_deb_version=$SAFE_DEBVER" >> "$GITHUB_OUTPUT"

      - name: Compose tags
        id: tags
        run: |
          set -euo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          SUITE="${{ steps.debian-version.outputs.codename }}"
          VER="${{ steps.openvpn-version.outputs.safe_deb_version }}"
          echo "primary=${IMG}:debian-${SUITE}-openvpn-${VER}" >> "$GITHUB_OUTPUT"
          echo "compat1=${IMG}:${VER}-debian-${SUITE}" >> "$GITHUB_OUTPUT"
          echo "compat2=${IMG}:${VER}" >> "$GITHUB_OUTPUT"
          echo "latest=${IMG}:latest" >> "$GITHUB_OUTPUT"

      - name: Check if the image already exists
        id: image-exists
        run: |
          set -euo pipefail
          
          IMAGE="${{ steps.tags.outputs.primary }}"
          
          echo "Checking if image $IMAGE exists"
          
          if docker pull $IMAGE; then
            echo "Image already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to ghcr.io
        if: github.event_name != 'schedule' || steps.image-exists.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: github.event_name != 'schedule' || steps.image-exists.outputs.exists == 'false'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tags.outputs.primary }}
            type=raw,value=${{ steps.tags.outputs.compat1 }}
            type=raw,value=${{ steps.tags.outputs.compat2 }}
            type=raw,value=${{ steps.tags.outputs.latest }},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.version=${{ steps.openvpn-version.outputs.deb_version }}
            org.opencontainers.image.base.name=debian:stable-slim
            org.opencontainers.image.ref.name=openvpn=${{ steps.openvpn-version.outputs.deb_version }}

      - name: Push the images to ghcr.io
        if: github.event_name != 'schedule' || (steps.image-exists.outputs.exists == 'false' && github.ref == 'refs/heads/master')
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          build-args: |
            DEBIAN_SUITE=${{ steps.debian-version.outputs.codename }}
            OPENVPN_VERSION=${{ steps.openvpn-version.outputs.deb_version }}

